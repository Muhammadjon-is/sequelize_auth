sudo -i -u postgres

\c => connect uchun
DROP DATABASE => data basani o'chirib yuborish uchun
CREATE TABLE JADVAL-NOMI (
  ustun_nomi + data type + qo'shimcha 
)
////////////////////////////////////
\d => Tableni ko'rish uchun
\d table => Malumotlarni ko'rish uchun 
Bigserieal => for ID chunki ID bo'sh bo'lishu mumkin emas 
DROP TABEL => tableni o'chirib yuborish uchun 
ALTER CONSTRAINT tablelarni o'zgartirish uchun 
/// Malumot qo'shish
/////////////////////////////////////////////
INSERT INTO your_table_name (name, email, birthdate)

VALUES ('Muhammad', 'joxa@gmail.com', DATE '2001-01-01');

\i fileni o'qish uchun 

select  first_name, email, gender from users  => ustunlarni tanlab olish uchun

ASC => o'sish tartibida joylashtiradi

DSC => kamayish tartibida joylashtirad

SELECT * FROM users ORDER BY date_of_birth ;

SELECT  DISTINCT  country FROM users ORDER BY country ; => yakkalab tanlab olish uchun

//////////////////////////////////////////
SELECT * FROM users WHERE gender='Female'; => where qayerda izlab topish uchun	

SELECT * FROM users WHERE gender='Female' AND country='China';

SELECT * FROM users WHERE gender='Female' AND ( country='China' OR country='Russia');


SELECT * FROM users OFFSET 10 LIMIT 10; => LIMIT TANLAB OLISH UCHUN


SELECT * FROM users  WHERE country IN ('Russia', 'Brazil', 'Poland')=> malumotlarni ichidan tanlab olish uchun 

/////////////////////////////////////
SELECT * FROM users  WHERE  date_of_birth
BETWEEN DATE '2001-05-05' AND '2021-01-01'; =>  Between orasidan topish


SELECT * FROM users WHERE email LIKE '%mozilla.com'; => % Like 


SELECT  DISTINCT country FROM users; => Davlatlarni tanlab olish uchun 

////////////////////////////

GROUP BY & Having
 GROUP BY tanlab olish uchun
SELECT country, COUNT(*) FROM  users GROUP BY country;

SELECT country, COUNT(*) FROM users GROUP BY country HAVING COUNT(*) > 6 ORDER BY country;


SELECT country, COUNT(*) FROM  users GROUP BY country ORDER BY country;

😁️ HAVINGNI DOIM GOUP BY BN BIRGA ISHLATAMIZ

/////////////////////////
AGGREGATE FUNCTIONS 
MIN(), MAX(), AVG(), SUM() 
ROUND () yaxlitlash uchun
ELECT ROUND( avg(price)) FROM cars;

SELECT make, model, MIN(price) FROM cars GROUP BY make, model;
bizaga barcha modelini minimum narxini chiqarib beradi

ALTER TABLE users  ADD PRIMARYKEY(id);
ID ga primary key qo'shish uchun 


//////////////////////////////////////
Arifmetik operatsiyalar va ALIAS

SELECT id, make, model, price, price * .10 FROM cars; 
mashina narxlarini 10% ga tushirish narxi 

ALIAS qisqartirlib AS yoziladi 
SELECT id, make, model, price AS original_price, ROUND( price * .10, 2) AS chegirma, ROUND(price - (price * 0.10), 2) AS aksiya_narxi  FROM cars;
///////////////////////////////////////////
COALESCE & NUllIF

SELECT COALESCE(null, null, 6, 50);
bu yerda eng birinchi null bo'lmagan qiymatni oladi

SELECT COALESCE(email, "email kiritilmagan") FROM  users;
 bu yerda yoq emaillar uchun Email kiritilamgan joyni qaytaradi 
 
 
 NUllIF funksiya hisoblanadi va uziga 2 ta argumentni qabul qiladi
 SELECT NULLIF(5, 6 );

///////////////////////////
TIMESTAMP va DATES

SELECT first_name, last_name, gender,country, date_of_birth, AGE(NOW(), date_of_birth) as age from users;

////////////////////////////////////////////////////////////
Primary key
SELECT  * FROM users WHERE id =1;
bu yerda shu faqat 1 id li user topib beradi 

///////////////// u
UNIQUE 

ALTER TABLE  users ADD CONSTRAINT unique_email UNIQUE(email);
bu yerda emailga unique berilyapti va endi emaillar takrorlanmaydi

alter  table users  add  unique(email);
bu esa ikkinchi yo'l

/// ////////////////////////////////
Check haqida 

ALter table users  add constraint gender_contraint check (gender = 'Female' OR gender='Male');

 bu yerda endi genderni ham tekshiradi 
 
 
 //////////////////////////
 delete
 
 delete from  users  where id=2
 buni ishlatishda ehtiyot bo'lishimiz kerak
 bu yerda biz userID 2 ni o'chirib yubordik
 
 DELETE FROM  users  WHERE gender = 'Male' AND country = 'Pakistan';
 
 //////////////////////////////u
 Update
 UPDATE  users  set  email = 'salom@gmail.com' where id = 2;
 bu yerda biz idsi 2 bo'lgan userni emailin o'zgartirdik
 
 UPDATE  users  SET  first_name = 'joxa', last_name='ga root', country ='uzb' WHERE id = 2;
 biz bu yerda bir nechta fieldlarni ham o'zgartirishimiz mumkin;
 
 
 /////////////////////////////
 FOREIGN KEY, JOIN va RELATIONSHIPS
 
  Tabler ketmga -ketligi to'g'ri bo'lishi kerak
  
  UPDATE users SET car_id = 1 WHERE id = 1;
   bu yerda biz bir id carni  1 id userga biriktirdik
   
   CREATE TABLE cars (
  id BIGSERIAL PRIMARY KEY NOT NULL,
  make VARCHAR(80),
  model VARCHAR(80),
  price NUMERIC(19, 2)
);

-- Create the "users" table with a foreign key reference to "cars"
CREATE TABLE users (
  id BIGSERIAL PRIMARY KEY NOT NULL,
  first_name VARCHAR(80) NOT NULL,
  last_name VARCHAR(80) NOT NULL,
  email VARCHAR(100),
  gender VARCHAR(10),
  date_of_birth DATE,
  Country VARCHAR(50),
  car_id BIGINT REFERENCES cars(id),
  -- user table bir xil bo'lishi kerak
  UNIQUE (car_id)
);


////////////////////////////////////////////////////////
INNER JOIN
2 ta tabledagi maluotlarni olamiz 
 \x => Jadvalni sozlab olish uchun
SELECT  * FROM users 
learning-# JOIN cars ON  use

learning-# JOIN cars ON  users.car_id  = car.id


SELECT  users.first_name, cars.make, cars.model, cars.price FROM  users
JOIN cars ON users.car_id = cars.id;
 bu  yerda mashinasi bor userlarni fieldlarini olib oldik
 
 /////////////////////////////////////////////////////
 Left Join
 A  tableni va tabledagi B table bn Connection bo'lgan malumotlarni qaytaradi
 Ularda chapda va o'rtadagi malumot qaytadi va B dagi malumotlarni  bog'lanmagani qaytamaydi

SELECT  * from users
LEFT JOIN   cars ON cars.id = users.car_id;
 bu yerda tabledagi malumotlarni chaqirib olyammiz
 
 ////////////////////////////////////////////////////////
 RIGHT JOIN 
 bu LEFT joinni teskarisi
  B table va tabledagi A bn Connnection bo'lgan malumotlarni qayataradi 
  
  SELECT  * from users
RIGHT JOIN cars ON cars.id = users.car_id;

 
 
 UPDATE users  SET car_id = null WHERE ID = 1;
bu yeda biz ulangan malumotni null ga tenglab oldik va keyin udalit qilib tashladik


 \copy (SELECT * FROM users LEFT JOIN cars ON cars.id = users.car_id) TO '/var/lib/pgsql/results.csv' DELIMITER ',' CSV HEADER;
 fayllarni csv shaklda saqlash uchun





